// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  // provider = "prisma-client-js"
  // output   = "../generated/prisma"

  provider = "prisma-client-js"
  output   = "../../node_modules/.prisma/client"
  // provider        = "prisma-client"
  // output   = "../generated/prisma"

  // previewFeatures = ["queryCompiler", "driverAdapters"]
  // output          = "../src/generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String? // For email/password auth
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// -------------------------------------- Product Scraper -----------------------------------------------------------------

model Product {
  id           String         @id @default(cuid())
  title        String
  imageUrl     String?
  productUrl   String         @unique
  vendor       Vendor
  asin         String? // Amazon Standard Identification Number
  flipkartId   String? // Flipkart product ID
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  priceHistory PriceHistory[]
  trackedItems TrackedItem[]

  @@index([vendor, asin])
  @@index([vendor, flipkartId])
}

model TrackedItem {
  id          String       @id @default(cuid())
  name        String // User-friendly name for the tracked item
  searchQuery String // Original search query
  targetPrice Decimal?     @db.Decimal(10, 2) // Alert when price drops below this
  isActive    Boolean      @default(true)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  userId      String? // For future user implementation
  products    Product[]
  alerts      PriceAlert[]

  @@index([isActive])
}

model PriceHistory {
  id            String   @id @default(cuid())
  productId     String
  product       Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  price         Decimal  @db.Decimal(10, 2)
  currency      String   @default("INR")
  availability  Boolean  @default(true)
  rating        Decimal? @db.Decimal(3, 2)
  reviewCount   Int?
  discount      Int? // Discount percentage
  originalPrice Decimal? @db.Decimal(10, 2)
  scrapedAt     DateTime @default(now())

  @@index([productId, scrapedAt])
}

model PriceAlert {
  id            String      @id @default(cuid())
  trackedItemId String
  trackedItem   TrackedItem @relation(fields: [trackedItemId], references: [id], onDelete: Cascade)
  message       String
  priceChange   Decimal     @db.Decimal(10, 2)
  oldPrice      Decimal     @db.Decimal(10, 2)
  newPrice      Decimal     @db.Decimal(10, 2)
  isRead        Boolean     @default(false)
  createdAt     DateTime    @default(now())

  @@index([trackedItemId, isRead])
}

model ScrapeLog {
  id           String       @id @default(cuid())
  vendor       Vendor
  status       ScrapeStatus
  itemsScraped Int          @default(0)
  errorMessage String?
  duration     Int // Duration in milliseconds
  createdAt    DateTime     @default(now())
}

enum Vendor {
  AMAZON
  FLIPKART
}

enum ScrapeStatus {
  SUCCESS
  PARTIAL_SUCCESS
  FAILED
}
